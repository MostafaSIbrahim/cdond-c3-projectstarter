version: 2.1
orbs: 
  slack: circleci/slack@4.10.1            
commands:
  destroy_environments:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        - image: cimg/node:16.15.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  test-backend:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
             cd backend
             npm install
             npm run test 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
      docker:
        - image: cimg/node:16.15.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Scan front-end
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --force
             npm audit --audit-level=critical 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build          
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=finalproject \
              --stack-name "FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=finalproject \
              --stack-name "FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environments      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
#      - scan-frontend:
#          requires: [test-frontend]
#      - scan-backend:
#          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]