version: 2.1
orbs: 
  slack: circleci/slack@4.10.1            
commands:
  destroy_environments:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}
nodedoker: &nodedoker
  docker:
    - image: cimg/node:13.8.0
jobs:
  build-frontend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-mybuild]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-mybuild
  build-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-mybuild

  test-frontend:
      <<: *nodedoker
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-mybuild]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]
      - run:
          name: Test Back-end
          command: |
             cd backend
             npm install
             npm run test 

  scan-frontend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-mybuild]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]    
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fic --force
            npm audit fix --force
            npm audit --audit-level=critical 
      

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=finalproject \
  #             --stack-name "FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=finalproject \
  #             --stack-name "FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           rm ~/project/.circleci/ansible/inventory.txt
  #           aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text >> ~/project/.circleci/ansible/inventory.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy_environments      

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["7d:69:fe:fc:fb:e5:18:eb:a8:d9:75:a5:7b:70:cb:72"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project
  #     - destroy_environments      
  
  # run-migrations:
  #   <<: *nodedoker
  #   steps:
  #     - restore_cache:
  #         keys: [backend-build01]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm run migrations > migrations_dump.txt
  #           cat < migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |   
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             echo "migration success"
  #             curl https://kvdb.io/BbSEdx5hwR5B6tMh7cgiF2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'migration Success'
  #           fi        
  #     - save_cache:
  #         paths: [backend]
  #         key: backend-build01          
  #     - destroy_environments          

  # deploy-frontend:
  #   <<: *nodedoker
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build01]
  #     - run:
  #         name: "Install tar gzip"
  #         become: yes
  #         command: |
  #           sudo apt install -y tar gzip      
  #     #- attach_workspace:
  #     #    at: ~/
  #     - run:
  #         name: "update apt packages."
  #         become: yes
  #         command: |
  #           sudo apt -y update
  #     - run:
  #         name: "upgrade packages"
  #         become: yes
  #         command: |
  #           sudo apt -y upgrade
  #     - run:
  #         name: remove dependencies that are no longer required
  #         become: yes
  #         command: |
  #           sudo apt -y autoremove 
  #     - run:
  #         name: install python
  #         become: yes
  #         command: |
  #           sudo apt -y install python3
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt -y install ansible
  #     - run:
  #         name: Install AWS CLI
  #         become: yes
  #         command: |
  #           sudo apt -y install awscli      
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress')
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           #npm install
  #           #npm audit fix --force
  #           #npm audit --audit-level=critical
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - save_cache:
  #         paths: [frontend]
  #         key: frontend-build01            
  #     - destroy_environments

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["7d:69:fe:fc:fb:e5:18:eb:a8:d9:75:a5:7b:70:cb:72"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: "Install tar gzip"
  #         become: yes
  #         command: |
  #           apk add --update tar gzip      
  #     - run:
  #         name: install nodejs
  #         become: yes
  #         command: |
  #           apk add --update nodejs
  #     - run:
  #         name: install npm
  #         become: yes
  #         command: |
  #           apk add --update npm
  #     - run:
  #         name: install pm2 after installing npm
  #         become: yes
  #         command: |
  #           npm install pm2 -g      
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm update
  #           npm audit fix --force
  #           npm run build
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project
  #     - destroy_environments      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # #- run-migrations:
      #  #   requires: [configure-infrastructure]
      # - deploy-frontend
      #     #requires: [run-migrations]    
      # - deploy-backend
      #     #requires: [deploy-frontend]    