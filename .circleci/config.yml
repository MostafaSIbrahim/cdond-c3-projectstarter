version: 2.1
orbs: 
  slack: circleci/slack@4.9.3            
commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-project
          template: basic_fail_1
  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install        
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y      
  destroy_environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert_migrations:
    description: Revert the failes migrations 
    steps:
      - run:
          name: revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/BbSEdx5hwR5B6tMh7cgiF2/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if ((SUCCESS == 1));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
  install_nodejs:
    description: install node.js 13
    steps:
      - run:
          name: download nodejs 13 image
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
nodedoker: &nodedoker
  docker:
    - image: cimg/node:13.8.0
jobs:
  build-frontend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-mybuild]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-mybuild
      - notify_on_failure
  build-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-mybuild
      - notify_on_failure
  test-frontend:
      <<: *nodedoker
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-mybuild]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test
        - notify_on_failure
  test-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]
      - run:
          name: Test Back-end
          command: |
             cd backend
             npm install
             npm run test 
      - notify_on_failure
  scan-frontend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-mybuild]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure
  scan-backend:
    <<: *nodedoker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-mybuild]    
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --force
            npm audit --audit-level=critical 
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=finalproject \
              --stack-name "FinalProject-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=finalproject \
              --stack-name "FinalProject-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environments      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["7d:69:fe:fc:fb:e5:18:eb:a8:d9:75:a5:7b:70:cb:72"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      - destroy_environments      
  
  run-migrations:
    <<: *nodedoker
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat < migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "migration success"
              curl https://kvdb.io/BbSEdx5hwR5B6tMh7cgiF2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'migration Success'
            fi        
      - destroy_environments
      - revert_migrations        

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-mybuild]
      - run:
          name: Install dependancies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environments
      - revert_migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["7d:69:fe:fc:fb:e5:18:eb:a8:d9:75:a5:7b:70:cb:72"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-mybuild]
      - run:
          name: Install Dependancies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend      
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz ./.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy Backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts      
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environments
      - revert_migrations      

  smoke-test:
      docker:
        - image: cimg/base:stable 
      steps:
        - checkout
        - install_awscli
        - install_nodejs
        - run:
            name: backend smoke test
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"  
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi    
        - run:
            name: Frontend smoke test.
            command: |
              FRONTEND_WEBLINK=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
              if curl -s $FRONTEND_WEBLINK | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi    
        - destroy_environments
        - revert_migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save old value for cloudfront in kvdb
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudfront \
              list-exports --query "Exports[?Name==\'WorkflowID\'].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/BbSEdx5hwR5B6tMh7cgiF2/old_workflow_id -d "${OLD_WORKFLOW_ID}"  
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name initialstack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - destroy_environments
      - revert_migrations

  cleanup:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install_awscli
        - install_nodejs
        - run:
            name: Get old stack workflow id and delete old resources
            command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"   
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd-project
          template: success_tagged_deployment_1  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]    
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]            
      # - cleanup:
      #     requires: [cloudfront-update]    
      - notify_on_success:
          requires: [build-frontend, build-backend, test-frontend, test-backend, 
                    scan-frontend, scan-backend, deploy-infrastructure, 
                    configure-infrastructure, run-migrations, deploy-frontend,
                    deploy-backend, smoke-test]